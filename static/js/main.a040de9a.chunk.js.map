{"version":3,"sources":["js/actions/index.js","js/constants/action-types.js","utils/Diceware.js","Components/Words.js","Components/WordButtons.js","constants.js","Components/CopyButton.js","Components/App.js","serviceWorker.js","js/reducers/index.js","js/store/index.js","index.js"],"names":["newClick","payload","type","getRandomDiceRoll","number","rand","undefined","isNaN","dice","diceDict","container","forEach","num","index","push","className","key","Words","word","numbers","useState","passphrase","setPassphrase","localNumber","setLocalNumber","words","setWords","useSelector","state","new_click","dispatch","useDispatch","useEffect","all_die","num_words","__","diceroll","_","dice_num","get_all_die","all_words","wordlist_obj","JSON","parse","stringify","eff_large_wordlist","diceRoll","element","dicerollStr","join","get_all_words","wordsArray","i","length","wordNumber","WordButtons","props","selectedNumber","maxNumberWords","setMaxNumberWords","minNumberWords","setMinNumberWords","wordButton","value","onClick","clickButton","buttons","mapButtons","disabled","CopyButton","connect","pass","React","open","setOpen","handleTooltipClose","copyPass","navigator","clipboard","writeText","ClickAwayListener","onClickAway","Tooltip","PopperProps","disablePortal","onClose","disableFocusListener","disableHoverListener","disableTouchListener","title","arrow","App","id","href","Component","Boolean","window","location","hostname","match","initialState","rootReducer","action","Object","assign","store","createStore","ReactDOM","render","document","getElementById","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gWAQO,SAASA,EAASC,GACvB,MAAO,CAAEC,KCPc,YDOGD,W,6BEwBtBE,EAAoB,SAApBA,IACJ,IAAIC,EAASC,IAAK,EAAG,GACrB,YAAeC,IAAXF,GAAwBG,MAAMH,IAAWA,EAAS,GAAKA,EAAS,EAC3DD,IAEFC,GChBHI,EAAO,SAACJ,GACb,IAAMK,EAAW,CAAC,EAAK,SAAK,EAAK,SAAK,EAAK,SAAK,EAAK,SAAK,EAAK,SAC7D,EAAK,UACHC,EAAY,GAQhB,OAPAN,EAAOO,SAAQ,SAACC,EAAKC,GACpBH,EAAUI,KACT,0BAAMC,UAAW,UAAWC,IAAKH,GAC/BJ,EAASG,QAKZF,GAKWO,EAAQ,WAAO,IAlCdC,EAAMC,EAASH,EAkCF,EACUI,mBAAS,IADnB,mBACnBC,EADmB,KACPC,EADO,OAEYF,mBAAS,GAFrB,mBAEnBG,EAFmB,KAENC,EAFM,OAGAJ,mBAAS,GAHT,mBAGnBK,EAHmB,KAGZC,EAHY,KAKpBtB,EAASuB,aAAY,SAAAC,GAAK,OAAIA,EAAMxB,UACpCyB,EAAYF,aAAY,SAAAC,GAAK,OAAIA,EAAMC,aACvCC,EAAWC,cAOjB,GALAC,qBAAU,WACTF,EH9CO,CAAE5B,KCHa,WDGGD,QG8CRoB,MACb,CAACA,IAGFE,IAAgBnB,GAAUyB,EAAW,CAExCC,EAAS9B,GAAS,IAClBwB,EAAepB,GACf,IAAM6B,EDtDmB,SAACC,GAE1B,IADA,IAAID,EAAU,GACLE,EAAK,EAAGA,EAAKD,EAAWC,IAAM,CAEnC,IADA,IAAIC,EAAW,GACNC,EAAI,EAAGA,EAAI,EAAGA,IAAK,CACxB,IAAIC,EAAWnC,IACfmC,IACAF,EAAStB,KAAKwB,GAElBL,EAAQnB,KAAKsB,GAEjB,OACEH,EC0CcM,CAAYnC,GACtBoC,EDvCqB,SAACP,GAC5B,IAAMQ,EAAeC,KAAKC,MAAMD,KAAKE,UAAUC,IAC3CL,EAAY,GACZM,EAAW,GAQf,OANAb,EAAQtB,SAAQ,SAAAoC,GACd,IAAMC,EAAcD,EAAQE,KAAK,IACjCH,EAAShC,KAAKkC,GACdR,EAAU1B,KAAK2B,EAAaO,OAGvBR,EC4BWU,CAAcjB,GAEhCX,EADakB,EAAUS,KAAK,KAI5B,IADA,IAAIE,EAAa,GACTC,EAAI,EAAGA,EAAIZ,EAAUa,OAAQD,IAAK,CACzC,IAAIE,GA3DOpC,EA2DWsB,EAAUY,GA3DfjC,EA2DmBc,EAAQmB,GA3DlBpC,EA2DsBoC,EAzDjD,0BAAMpC,IAAKA,EAAKD,UAAW,0BAC1B,yBAAKA,UAAW,sBACdG,GAEF,yBAAKH,UAAW,qCACdP,EAAKW,IAEP,yBAAKJ,UAAW,qCACdI,KAkDFgC,EAAWrC,KAAKwC,GAEjB5B,EAASyB,GAMV,OACC,yBAAKpC,UAAU,mBAAmBU,ICErB8B,EApEK,SAACC,GAEpB,IAAM1B,EAAWC,cAEX0B,EAAiB9B,aAAY,SAAAC,GAAK,OAAIA,EAAMxB,UAJpB,EAMcgB,mBCbhB,GDOE,mBAMvBsC,EANuB,KAMPC,EANO,OAUcvC,mBClBhB,GDQE,mBAUvBwC,EAVuB,KAUPC,EAVO,KA4BxBC,EAAa,SAAC1D,GACnB,OACC,4BAAQY,IAAKZ,EAAQW,UAAW,8IAAgJ0C,IAAmBrD,EAAS,qCAAuC,IACjP2D,MAAO3D,EAAQ4D,QAAS,kBARR,SAAC5D,GACpB0B,EJ1BO,CAAE5B,KCLkB,gBDKGD,QI0BRG,IACtB0B,EAAS9B,GAAS,IAMeiE,CAAY7D,KAC1CA,EAFF,WAeF,OACC,6BACC,yBAAKW,UAAU,cAhCE,WAElB,IADA,IAAImD,EAAU,GACNd,EAAIQ,EAAgBR,GAAKM,EAAgBN,IAChDc,EAAQpD,KAAKgD,EAAWV,IAEzB,OAAOc,EA4BJC,IAEF,6BACC,4BAAQpD,UAAW,+FAAiG6C,GAAkB,EAAI,iCAAmC,IAC3KI,QAXe,WACnBH,EAAkBD,EAAe,IAW7BQ,SAAUR,GAAkB,GAF9B,KAKA,4BAAQ7C,UAAU,iGAEhBiD,QArBe,WACnBL,EAAkBD,EAAe,KAkB/B,Q,kBECWW,EAFIC,aAxDK,SAAA1C,GACtB,MAAO,CAAE2C,KAAM3C,EAAM2C,QAuDJD,EAnDI,SAAC,GAAY,IAAXC,EAAU,EAAVA,KAAU,EAEVC,IAAMpD,UAAS,GAFL,mBAE3BqD,EAF2B,KAErBC,EAFqB,KAI5BC,EAAqB,WACzBD,GAAQ,IAQJE,EAAW,WAChBC,UAAUC,UAAUC,UAAUR,GAL7BG,GAAQ,IASV,YAA2BpE,IAAxBuE,UAAUC,UACJ,KAIP,kBAACE,EAAA,EAAD,CAAmBC,YAAaN,GAC/B,6BACC,kBAACO,EAAA,EAAD,CACAC,YAAa,CACbC,eAAe,GAEfC,QAASV,EACTF,KAAMA,EACNa,sBAAoB,EACpBC,sBAAoB,EACpBC,sBAAoB,EACpBC,MAAM,SACNC,OAAK,GAEL,4BAAQ3E,UAAU,kIAGjBiD,QAAS,WAAOY,MAHjB,yBCzBUe,E,uKAfL,OACI,yBAAK5E,UAAU,OACT,yBAAK6E,GAAI,gBACL,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,OAEJ,yBAAKA,GAAI,UAAT,eACgB,uBAAGC,KAAM,mCAAT,qBADhB,iBAC+F,uBAAGA,KAAM,mCAAT,wB,GAXjGrB,IAAMsB,WCMJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,YChBAC,EAAe,CACjB7B,KAAM,GACNnE,OAAQ,EACRyB,WAAW,GAsBAwE,MAnBf,WAAoD,IAA/BzE,EAA8B,uDAAtBwE,EAAcE,EAAQ,uCAC/C,MRToB,aQShBA,EAAOpG,KACAqG,OAAOC,OAAO,GAAI5E,EAAO,CAC5B2C,KAAM+B,EAAOrG,URVI,kBQarBqG,EAAOpG,KACAqG,OAAOC,OAAO,GAAI5E,EAAO,CAC5BxB,OAAQkG,EAAOrG,URdF,cQiBjBqG,EAAOpG,KACAqG,OAAOC,OAAO,GAAI5E,EAAO,CAC5BC,UAAWyE,EAAOrG,UAGnB2B,GCnBI6E,EAFDC,YAAYL,GCM1BM,IAASC,OACP,kBAAC,IAAD,CAAUH,MAAOA,GACf,kBAAC,EAAD,OAEFI,SAASC,eAAe,SHsHpB,kBAAmBjC,WACrBA,UAAUkC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.a040de9a.chunk.js","sourcesContent":["import { ADD_PASS, CHANGE_NUMBER, NEW_CLICK } from \"../constants/action-types\";\r\n\r\nexport function addPass(payload) {\r\n  return { type: ADD_PASS, payload }\r\n};\r\nexport function changeNumber(payload) {\r\n  return { type: CHANGE_NUMBER, payload }\r\n};\r\nexport function newClick(payload) {\r\n  return { type: NEW_CLICK, payload }\r\n};","export const ADD_PASS = \"ADD_PASS\";\r\nexport const CHANGE_NUMBER = \"CHANGE_NUMBER\";\r\nexport const NEW_CLICK = \"NEW_CLICK\";","import rand from 'csprng';\r\nimport eff_large_wordlist from \"../assets/eff_large_wordlist.json\"\r\n\r\nexport const get_all_die = (num_words) => {\r\n  let all_die = []\r\n  for (let __ = 0; __ < num_words; __++) {\r\n      let diceroll = []\r\n      for (let _ = 0; _ < 5; _++) {\r\n          let dice_num = getRandomDiceRoll();\r\n          dice_num++;\r\n          diceroll.push(dice_num)\r\n      }\r\n      all_die.push(diceroll)\r\n  }\r\n  return (\r\n    all_die\r\n  );\r\n}\r\n\r\nexport const get_all_words = (all_die) => {\r\n  const wordlist_obj = JSON.parse(JSON.stringify(eff_large_wordlist));\r\n  let all_words = []\r\n  let diceRoll = []\r\n\r\n  all_die.forEach(element => {\r\n    const dicerollStr = element.join(\"\")\r\n    diceRoll.push(dicerollStr)\r\n    all_words.push(wordlist_obj[dicerollStr])\r\n  });\r\n\r\n  return all_words;\r\n}\r\n\r\nconst getRandomDiceRoll = () => {\r\n  let number = rand(1, 6);\r\n  if (number === undefined || isNaN(number) || number < 0 || number > 5) {\r\n    return getRandomDiceRoll();\r\n  }\r\n  return number;\r\n}","import React, {useState, useEffect} from 'react';\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { addPass, newClick } from \"../js/actions/index\";\r\nimport {get_all_die, get_all_words} from '../utils/Diceware';\r\n\r\nconst word = (word, numbers, key) => {\r\n\treturn (\r\n\t\t<span key={key} className={\"mx-2 my-3 inline-block\"}>\r\n\t\t\t<div className={\"text-3xl font-bold\"}>\r\n\t\t\t\t{word}\r\n\t\t\t</div>\r\n\t\t\t<div className={\"text-lg font-medium tracking-wide\"}>\r\n\t\t\t\t{dice(numbers)}\r\n\t\t\t</div>\r\n\t\t\t<div className={\"text-lg font-medium tracking-wide\"}>\r\n\t\t\t\t{numbers}\r\n\t\t\t</div>\r\n\t\t</span>\r\n\t)\r\n}\r\n\r\n\r\nconst dice = (number) => {\r\n\tconst diceDict = {'1': '⚀', '2': '⚁', '3': '⚂', '4': '⚃', '5': '⚄', \r\n\t\t\t'6': '⚅'}\r\n\tlet container = []\r\n\tnumber.forEach((num, index)=>{\r\n\t\tcontainer.push(\r\n\t\t\t<span className={\"text-xl\"} key={index}>\r\n\t\t\t\t{diceDict[num]}\r\n\t\t\t</span>\r\n\t\t)\r\n\t})\r\n\treturn (\r\n\t\tcontainer\r\n\t)\r\n}\r\n\r\n\r\nexport const Words = () => {\r\n\tconst [passphrase, setPassphrase] = useState(\"\");\r\n\tconst [localNumber, setLocalNumber] = useState(0);\r\n\tconst [words, setWords] = useState(0);\r\n\r\n\tconst number = useSelector(state => state.number);\r\n\tconst new_click = useSelector(state => state.new_click);\r\n\tconst dispatch = useDispatch();\r\n\r\n\tuseEffect(() => {\r\n\t\tdispatch(addPass(passphrase))\r\n\t  }, [passphrase]);\r\n\r\n\t\r\n\tif (localNumber !== number || new_click) {\r\n\t\t\r\n\t\tdispatch(newClick(false))\r\n\t\tsetLocalNumber(number)\r\n\t\tconst all_die = get_all_die(number)\r\n\t\tconst all_words = get_all_words(all_die)\r\n\t\tconst pass = all_words.join(\"\")\r\n\t\tsetPassphrase(pass);\r\n\t\r\n\t\tlet wordsArray = [];\r\n\t\tfor(let i = 0; i < all_words.length; i++) {\r\n\t\t\tlet wordNumber = word(all_words[i], all_die[i], i)\r\n\t\t\twordsArray.push(wordNumber)\r\n\t\t}\r\n\t\tsetWords(wordsArray)\r\n\t}\r\n\r\n\r\n\t\r\n\r\n\treturn (\r\n\t\t<div className=\"max-w-full mb-8\">{words}</div>\r\n\t);\r\n\r\n}","import React, {useState} from 'react';\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { changeNumber } from \"../js/actions/index.js\";\r\nimport '../css/style.css';\r\nimport * as myConstClass from '../constants.js';\r\nimport { newClick } from \"../js/actions/index\";\r\n\r\n\r\nconst WordButtons = (props) => {\r\n\r\n\tconst dispatch = useDispatch();\r\n\r\n\tconst selectedNumber = useSelector(state => state.number);\r\n\r\n\tconst [maxNumberWords, setMaxNumberWords] = useState(\r\n\t\tmyConstClass.MAX_NUM_WORDS\r\n\t);\r\n\r\n\tconst [minNumberWords, setMinNumberWords] = useState(\r\n\t\tmyConstClass.MIN_NUM_WORDS\r\n\t);\r\n\r\n\r\n\tconst mapButtons = () => {\r\n\t\tlet buttons = [];\r\n\t\tfor(let i = minNumberWords; i <= maxNumberWords; i++) {\r\n\t\t\tbuttons.push(wordButton(i))\r\n\t\t}\r\n\t\treturn buttons;\r\n\t}\r\n\r\n\tconst clickButton = (number) => {\r\n\t\tdispatch(changeNumber(number))\r\n\t\tdispatch(newClick(true))\r\n\t}\r\n\r\n\tconst wordButton = (number) => {\r\n\t\treturn (\r\n\t\t\t<button key={number} className={\"word-count-button font-bold py-2 px-4 border border-white-500 hover:text-purple-500 hover:border-purple-500 rounded my-2 mx-1 inline-block\" + (selectedNumber === number ? \" border-purple-600 text-purple-600\" : \"\")}\r\n\t\t\t\t\tvalue={number} onClick={() => clickButton(number)}>\r\n\t\t\t\t{number} words\r\n\t\t\t</button>\r\n\t\t)\r\n\t}\r\n\r\n\tconst increaseMax = () => {\r\n\t\tsetMaxNumberWords(maxNumberWords+1);\r\n\t}\r\n\r\n\tconst decreaseMin = () => {\r\n\t\tsetMinNumberWords(minNumberWords-1);\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<div className=\"max-w-full\">\r\n\t\t\t\t{mapButtons()}\r\n\t\t\t</div>\r\n\t\t\t<div>\r\n\t\t\t\t<button className={'word-count-button font-bold py-2 px-4 border hover:border-purple-500 rounded my-2 mx-2 .w-2' + (minNumberWords <= 1 ? \" opacity-50 cursor-not-allowed\" : \"\")}\r\n\t\t\t\t\t\tonClick={decreaseMin}\r\n\t\t\t\t\t\tdisabled={minNumberWords <= 1}>\r\n\t\t\t\t\t-\r\n\t\t\t\t</button>\r\n\t\t\t\t<button className=\"word-count-button font-bold py-2 px-4 \r\n\t\t\t\t\t\tborder hover:border-purple-500 rounded my-2 mx-2 .w-2\"\r\n\t\t\t\t\t\tonClick={increaseMax}>\r\n\t\t\t\t\t+\r\n\t\t\t\t</button>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\n\r\n\r\nexport default WordButtons;\r\n","export const MIN_NUM_WORDS = 5\r\nexport const MAX_NUM_WORDS = 8","import React from 'react';\r\nimport { connect } from \"react-redux\";\r\nimport '../css/style.css';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport ClickAwayListener from '@material-ui/core/ClickAwayListener';\r\n\r\n\r\nconst mapStateToProps = state => {\r\n  return { pass: state.pass };\r\n};\r\n\r\n\r\nconst CopyButtonPass = ({pass}) => {\r\n\t\r\n\tconst [open, setOpen] = React.useState(false);\r\n\r\n\tconst handleTooltipClose = () => {\r\n\t  setOpen(false);\r\n\t};\r\n  \r\n\tconst handleTooltipOpen = () => {\r\n\t  setOpen(true);\r\n\t};\r\n  \r\n\r\n\tconst copyPass = () => {\r\n\t\tnavigator.clipboard.writeText(pass)\r\n\t\thandleTooltipOpen()\r\n\t}\r\n\r\n\tif(navigator.clipboard === undefined) {\r\n\t\treturn (null)\r\n\t}\r\n\telse{\r\n\t\treturn (\r\n\t\t\t<ClickAwayListener onClickAway={handleTooltipClose}>\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<Tooltip\r\n\t\t\t\t\tPopperProps={{\r\n\t\t\t\t\tdisablePortal: true,\r\n\t\t\t\t\t}}\r\n\t\t\t\t\tonClose={handleTooltipClose}\r\n\t\t\t\t\topen={open}\r\n\t\t\t\t\tdisableFocusListener\r\n\t\t\t\t\tdisableHoverListener\r\n\t\t\t\t\tdisableTouchListener\r\n\t\t\t\t\ttitle=\"Copied\"\r\n\t\t\t\t\tarrow\r\n\t\t\t\t>\r\n\t\t\t\t\t<button className=\"word-count-button font-bold py-2 px-4 \r\n\t\t\t\t\t\t\thover:text-purple-500 hover:border-purple-500 rounded \r\n\t\t\t\t\t\t\tmy-2 mx-2 .w-2 text-sm border\"\r\n\t\t\t\t\t\tonClick={() => {copyPass()}}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\tCopy Passphrase\r\n\t\t\t\t\t</button>\r\n\t\t\t\t</Tooltip>\r\n\t\t\t\t</div>\r\n\t\t\t</ClickAwayListener>\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n\r\nconst CopyButton = connect(mapStateToProps)(CopyButtonPass);\r\n\r\nexport default CopyButton;\r\n","import React from 'react';\nimport '../css/style.css';\nimport {Words} from './Words';\nimport WordButtons from './WordButtons';\nimport CopyButton from './CopyButton';\n\nclass App extends React.Component {\n\n    render() {\n          return (\n              <div className=\"App\">\n                    <div id={\"content-wrap\"}>\n                        <Words />\n                        <WordButtons />\n                        <CopyButton />\n                    </div>\n                    <div id={\"footer\"}>\n                        Inspired by <a href={\"https://diceware.herokuapp.com/\"}>Michael Henriksen</a> | Created by <a href={\"https://twitter.com/RMcElhinney\"}>Rob McElhinney</a>\n                    </div>\n              </div>\n          );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ADD_PASS, CHANGE_NUMBER, NEW_CLICK } from \"../constants/action-types\";\r\n\r\nconst initialState = {\r\n    pass: \"\",\r\n    number: 8,\r\n    new_click: true\r\n};\r\n  \r\nfunction rootReducer(state = initialState, action) {\r\n    if (action.type === ADD_PASS) {\r\n        return Object.assign({}, state, {\r\n            pass: action.payload\r\n          });\r\n    }\r\n    if (action.type === CHANGE_NUMBER) {\r\n        return Object.assign({}, state, {\r\n            number: action.payload\r\n          });\r\n    }\r\n    if (action.type === NEW_CLICK) {\r\n        return Object.assign({}, state, {\r\n            new_click: action.payload\r\n          });\r\n    }\r\n    return state;\r\n};\r\n\r\nexport default rootReducer;","import { createStore } from \"redux\";\r\nimport rootReducer from \"../reducers/index\";\r\n\r\nconst store = createStore(rootReducer);\r\n\r\nexport default store;","// import index from './js/index';\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './assets/main.css'\r\nimport App from './Components/App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { Provider } from 'react-redux';\r\nimport store from './js/store/index';\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}